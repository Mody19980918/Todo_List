/*
 * This file is generated by jOOQ.
 */
package com.diamondfsd.jooq.learn.codegen.tables;


import com.diamondfsd.jooq.learn.codegen.Indexes;
import com.diamondfsd.jooq.learn.codegen.Keys;
import com.diamondfsd.jooq.learn.codegen.Todolist;
import com.diamondfsd.jooq.learn.codegen.tables.records.TodolistUserRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * USER TABLE
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TodolistUser extends TableImpl<TodolistUserRecord> {

    private static final long serialVersionUID = 1673438066;

    /**
     * The reference instance of <code>todolist.todolist_user</code>
     */
    public static final TodolistUser TODOLIST_USER = new TodolistUser();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TodolistUserRecord> getRecordType() {
        return TodolistUserRecord.class;
    }

    /**
     * The column <code>todolist.todolist_user.id</code>. ID
     */
    public final TableField<TodolistUserRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "ID");

    /**
     * The column <code>todolist.todolist_user.username</code>.
     */
    public final TableField<TodolistUserRecord, String> USERNAME = createField(DSL.name("username"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>todolist.todolist_user.email</code>.
     */
    public final TableField<TodolistUserRecord, String> EMAIL = createField(DSL.name("email"), org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>todolist.todolist_user.password</code>.
     */
    public final TableField<TodolistUserRecord, String> PASSWORD = createField(DSL.name("password"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>todolist.todolist_user.create_time</code>.
     */
    public final TableField<TodolistUserRecord, Timestamp> CREATE_TIME = createField(DSL.name("create_time"), org.jooq.impl.SQLDataType.TIMESTAMP.defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>todolist.todolist_user.update_time</code>.
     */
    public final TableField<TodolistUserRecord, Timestamp> UPDATE_TIME = createField(DSL.name("update_time"), org.jooq.impl.SQLDataType.TIMESTAMP.defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * Create a <code>todolist.todolist_user</code> table reference
     */
    public TodolistUser() {
        this(DSL.name("todolist_user"), null);
    }

    /**
     * Create an aliased <code>todolist.todolist_user</code> table reference
     */
    public TodolistUser(String alias) {
        this(DSL.name(alias), TODOLIST_USER);
    }

    /**
     * Create an aliased <code>todolist.todolist_user</code> table reference
     */
    public TodolistUser(Name alias) {
        this(alias, TODOLIST_USER);
    }

    private TodolistUser(Name alias, Table<TodolistUserRecord> aliased) {
        this(alias, aliased, null);
    }

    private TodolistUser(Name alias, Table<TodolistUserRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("USER TABLE"));
    }

    public <O extends Record> TodolistUser(Table<O> child, ForeignKey<O, TodolistUserRecord> key) {
        super(child, key, TODOLIST_USER);
    }

    @Override
    public Schema getSchema() {
        return Todolist.TODOLIST;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TODOLIST_USER_PRIMARY);
    }

    @Override
    public Identity<TodolistUserRecord, Integer> getIdentity() {
        return Keys.IDENTITY_TODOLIST_USER;
    }

    @Override
    public UniqueKey<TodolistUserRecord> getPrimaryKey() {
        return Keys.KEY_TODOLIST_USER_PRIMARY;
    }

    @Override
    public List<UniqueKey<TodolistUserRecord>> getKeys() {
        return Arrays.<UniqueKey<TodolistUserRecord>>asList(Keys.KEY_TODOLIST_USER_PRIMARY);
    }

    @Override
    public TodolistUser as(String alias) {
        return new TodolistUser(DSL.name(alias), this);
    }

    @Override
    public TodolistUser as(Name alias) {
        return new TodolistUser(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TodolistUser rename(String name) {
        return new TodolistUser(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TodolistUser rename(Name name) {
        return new TodolistUser(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, String, String, String, Timestamp, Timestamp> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
